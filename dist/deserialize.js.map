{"version":3,"file":"deserialize.js","sourceRoot":"","sources":["../src/deserialize.ts"],"names":[],"mappings":";;;AAAA,qCAAsC;AAE/B,MAAM,oBAAoB,GAAG,CAAC,IAAa,EAAE,EAAE;IACpD,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;IAEnD,IAAI,GAAG,GAAG,CAAC,CAAA;IACX,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;IAC/C,GAAG,IAAI,CAAC,CAAA;IACR,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,gBAAgB,CAAC,CAAA;IAChE,GAAG,IAAI,gBAAgB,CAAA;IACvB,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;IAC/C,GAAG,IAAI,CAAC,CAAA;IACR,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,gBAAgB,CAAC,CAAA;IAChE,GAAG,IAAI,gBAAgB,CAAA;IAEvB,OAAO;QACL,aAAa;QACb,aAAa;KACd,CAAA;AACH,CAAC,CAAA;AAjBY,QAAA,oBAAoB,wBAiBhC;AAEM,MAAM,oBAAoB,GAAG,CAAC,IAAa,EAAE,EAAE;IACpD,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;IAEnD,IAAI,GAAG,GAAG,CAAC,CAAA;IACX,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;IAC/C,GAAG,IAAI,CAAC,CAAA;IACR,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,gBAAgB,CAAC,CAAA;IAChE,GAAG,IAAI,gBAAgB,CAAA;IACvB,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;IAC/C,GAAG,IAAI,CAAC,CAAA;IACR,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,gBAAgB,CAAC,CAAA;IAChE,GAAG,IAAI,gBAAgB,CAAA;IAEvB,OAAO;QACL,aAAa;QACb,aAAa;KACd,CAAA;AACH,CAAC,CAAA;AAjBY,QAAA,oBAAoB,wBAiBhC;AAEM,MAAM,mBAAmB,GAAG,CAAC,IAAa,EAAE,EAAE;IACnD,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAA;IAEnD,+BAA+B;IAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,oBAAW,CAAC,CAAA;IAE1C,OAAO;QACL,IAAI;KACL,CAAA;AACH,CAAC,CAAA;AATY,QAAA,mBAAmB,uBAS/B","sourcesContent":["import { TX_HASH_LEN } from './consts'\n\nexport const deserializeDkgRound1 = (data?: Buffer) => {\n  if (!data) throw new Error('unexpected empty data')\n\n  let pos = 0\n  const secretPackageLen = data.readUint16BE(pos)\n  pos += 2\n  const secretPackage = data.subarray(pos, pos + secretPackageLen)\n  pos += secretPackageLen\n  const publicPackageLen = data.readUint16BE(pos)\n  pos += 2\n  const publicPackage = data.subarray(pos, pos + publicPackageLen)\n  pos += publicPackageLen\n\n  return {\n    secretPackage,\n    publicPackage,\n  }\n}\n\nexport const deserializeDkgRound2 = (data?: Buffer) => {\n  if (!data) throw new Error('unexpected empty data')\n\n  let pos = 0\n  const secretPackageLen = data.readUint16BE(pos)\n  pos += 2\n  const secretPackage = data.subarray(pos, pos + secretPackageLen)\n  pos += secretPackageLen\n  const publicPackageLen = data.readUint16BE(pos)\n  pos += 2\n  const publicPackage = data.subarray(pos, pos + publicPackageLen)\n  pos += publicPackageLen\n\n  return {\n    secretPackage,\n    publicPackage,\n  }\n}\n\nexport const deserializeReviewTx = (data?: Buffer) => {\n  if (!data) throw new Error('unexpected empty data')\n\n  // We expect a hash of 32 bytes\n  const hash = data.subarray(0, TX_HASH_LEN)\n\n  return {\n    hash,\n  }\n}\n"]}