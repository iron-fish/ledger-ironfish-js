{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../src/serialize.ts"],"names":[],"mappings":"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","sourcesContent":["export const serializeDkgRound1 = (index: number, identities: string[], minSigners: number): Buffer => {\n  let blob = Buffer.alloc(1 + 1 + identities.length * 129 + 1)\n  console.log(`dkgRound1 msg size: ${blob.byteLength}`)\n\n  blob.writeUint8(index)\n  blob.writeUint8(identities.length, 1)\n  for (let i = 0; i < identities.length; i++) {\n    blob.fill(Buffer.from(identities[i], 'hex'), 1 + 1 + i * 129)\n  }\n  blob.writeUint8(minSigners, 1 + 1 + identities.length * 129)\n\n  return blob\n}\n\nexport const serializeDkgRound2 = (index: number, round1PublicPackages: string[], round1SecretPackage: string): Buffer => {\n  let round1PublicPackagesLen = round1PublicPackages[0].length / 2\n  let round1SecretPackageLen = round1SecretPackage.length / 2\n\n  let blob = Buffer.alloc(1 + 1 + 2 + round1PublicPackages.length * round1PublicPackagesLen + 2 + round1SecretPackageLen)\n  console.log(`dkgRound2 msg size: ${blob.byteLength}`)\n\n  let pos = 0\n\n  blob.writeUint8(index, pos)\n  pos += 1\n  blob.writeUint8(round1PublicPackages.length, pos)\n  pos += 1\n  blob.writeUint16BE(round1PublicPackagesLen, pos)\n  pos += 2\n\n  for (let i = 0; i < round1PublicPackages.length; i++) {\n    blob.fill(Buffer.from(round1PublicPackages[i], 'hex'), pos)\n    pos += round1PublicPackagesLen\n  }\n\n  blob.writeUint16BE(round1SecretPackageLen, pos)\n  pos += 2\n\n  blob.fill(Buffer.from(round1SecretPackage, 'hex'), pos)\n  pos += round1SecretPackageLen\n\n  return blob\n}\n\nexport const serializeDkgRound3Min = (\n  index: number,\n  participants: string[],\n  round1PublicPkgs: string[],\n  round2PublicPkgs: string[],\n  round2SecretPackage: string,\n  gskBytes: string[]\n): Buffer => {\n  let round1PublicPkgsLen = round1PublicPkgs[0].length / 2\n  let round2PublicPkgsLen = round2PublicPkgs[0].length / 2\n  let round2SecretPkgLen = round2SecretPackage.length / 2 // staying the same\n  let participantsLen = participants[0].length / 2\n  let gskLen = gskBytes[0].length / 2\n\n  let blob = Buffer.alloc(\n    1 +\n      1 +\n      2 +\n      round1PublicPkgs.length * round1PublicPkgsLen +\n      1 +\n      2 +\n      round2PublicPkgs.length * round2PublicPkgsLen +\n      2 +\n      round2SecretPkgLen +\n      1 +\n      2 +\n      participants.length * participantsLen +\n      1 +\n      2 +\n      gskBytes.length * gskLen\n  )\n  console.log(`dkgRound3 msg size: ${blob.byteLength}`)\n\n  let pos = 0\n\n  // identity index\n  blob.writeUint8(index, pos)\n  pos += 1\n\n  // number of round 1 packages\n  blob.writeUint8(round1PublicPkgs.length, pos)\n  pos += 1\n\n  // round 1 package length\n  blob.writeUint16BE(round1PublicPkgsLen, pos)\n  pos += 2\n\n  // round 1 packages\n  for (let i = 0; i < round1PublicPkgs.length; i++) {\n    blob.fill(Buffer.from(round1PublicPkgs[i], 'hex'), pos)\n    pos += round1PublicPkgsLen\n  }\n\n  // number of round 2 packages\n  blob.writeUint8(round2PublicPkgs.length, pos)\n  pos += 1\n  // round 2 package length\n  blob.writeUint16BE(round2PublicPkgsLen, pos)\n  pos += 2\n\n  // round 2 packages\n  for (let i = 0; i < round2PublicPkgs.length; i++) {\n    blob.fill(Buffer.from(round2PublicPkgs[i], 'hex'), pos)\n    pos += round2PublicPkgsLen\n  }\n\n  // round 2 secret\n  blob.writeUint16BE(round2SecretPkgLen, pos)\n  pos += 2\n\n  blob.fill(Buffer.from(round2SecretPackage, 'hex'), pos)\n  pos += round2SecretPkgLen\n\n  // participants\n  // number of participants\n  blob.writeUint8(participants.length, pos)\n  pos += 1\n\n  // participant payload length\n  blob.writeUint16BE(participantsLen, pos)\n  pos += 2\n\n  for (let i = 0; i < participants.length; i++) {\n    blob.fill(Buffer.from(participants[i], 'hex'), pos)\n    pos += participantsLen\n  }\n\n  // gsk_bytes\n  blob.writeUint8(gskBytes.length, pos)\n  pos += 1\n\n  blob.writeUint16BE(gskLen, pos)\n  pos += 2\n\n  for (let i = 0; i < gskBytes.length; i++) {\n    blob.fill(Buffer.from(gskBytes[i], 'hex'), pos)\n    pos += gskLen\n  }\n\n  return blob\n}\n\nexport const serializeDkgGetCommitments = (tx_hash: string): Buffer => {\n  let blob = Buffer.alloc(32)\n  console.log(`dkgGetCommitment msg size: ${blob.byteLength}`)\n\n  blob.fill(Buffer.from(tx_hash, 'hex'), 0)\n\n  return blob\n}\n\nexport const serializeDkgSign = (pkRandomness: string, frostSigningPackage: string, txHash: string): Buffer => {\n  let pkRandomnessLen = pkRandomness.length / 2\n  let frostSigningPackageLen = frostSigningPackage.length / 2\n  let txHashLen = 32\n\n  let blob = Buffer.alloc(2 + pkRandomnessLen + 2 + frostSigningPackageLen + txHashLen)\n  console.log(`dkgSign msg size: ${blob.byteLength}`)\n\n  let pos = 0\n\n  blob.writeUint16BE(pkRandomnessLen, pos)\n  pos += 2\n  blob.fill(Buffer.from(pkRandomness, 'hex'), pos)\n  pos += pkRandomnessLen\n\n  blob.writeUint16BE(frostSigningPackageLen, pos)\n  pos += 2\n  blob.fill(Buffer.from(frostSigningPackage, 'hex'), pos)\n  pos += frostSigningPackageLen\n\n  blob.fill(Buffer.from(txHash, 'hex'), pos)\n\n  return blob\n}\n"]}