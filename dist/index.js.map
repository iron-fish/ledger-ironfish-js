{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/** ******************************************************************************\n *  (c) 2019-2020 Zondax GmbH\n *  (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ******************************************************************************* */\nimport GenericApp, { ConstructorParams, LedgerError, Transport, processErrorResponse, processResponse } from '@zondax/ledger-js'\nimport { ResponsePayload } from '@zondax/ledger-js/dist/payload'\n\nimport { P2_VALUES } from './consts'\nimport { deserializeDkgRound1, deserializeDkgRound2, deserializeReviewTx } from './deserialize'\nimport { processGetIdentityResponse, processGetKeysResponse } from './helper'\nimport { serializeDkgGetCommitments, serializeDkgRound1, serializeDkgRound2, serializeDkgRound3Min, serializeDkgSign } from './serialize'\nimport {\n  IronfishIns,\n  IronfishKeys,\n  KeyResponse,\n  ResponseDkgBackupKeys,\n  ResponseDkgGetCommitments,\n  ResponseDkgGetPublicPackage,\n  ResponseDkgRound1,\n  ResponseDkgRound2,\n  ResponseDkgSign,\n  ResponseIdentity,\n  ResponseReviewTransaction,\n  ResponseSign,\n} from './types'\n\nexport * from './types'\n\nconst DUMMY_PATH = \"m/44'/1338'/0\"\n\nexport default class IronfishApp extends GenericApp {\n  readonly INS!: IronfishIns\n  constructor(transport: Transport, dkgMode?: boolean) {\n    if (transport == null) throw new Error('Transport has not been defined')\n\n    const params: ConstructorParams = {\n      cla: dkgMode ? 0x63 : 0x59,\n      ins: {\n        GET_VERSION: 0x00,\n        GET_KEYS: 0x01,\n        SIGN: 0x02,\n        //DKG Instructions\n        DKG_IDENTITY: 0x10,\n        DKG_ROUND_1: 0x11,\n        DKG_ROUND_2: 0x12,\n        DKG_ROUND_3_MIN: 0x13,\n        DKG_GET_COMMITMENTS: 0x14,\n        DKG_SIGN: 0x15,\n        DKG_GET_KEYS: 0x16,\n        DKG_GET_NONCES: 0x17,\n        DKG_GET_PUBLIC_PACKAGE: 0x18,\n        DKG_BACKUP_KEYS: 0x19,\n        DKG_RESTORE_KEYS: 0x1a,\n        GET_RESULT: 0x1b,\n        REVIEW_TX: 0x1c,\n      },\n      p1Values: {\n        ONLY_RETRIEVE: 0x00,\n        SHOW_ADDRESS_IN_DEVICE: 0x01,\n      },\n      acceptedPathLengths: [3],\n      chunkSize: 250,\n    }\n    super(transport, params)\n  }\n\n  async retrieveKeys(path: string, keyType: IronfishKeys, showInDevice: boolean): Promise<KeyResponse> {\n    const serializedPath = this.serializePath(path)\n    const p1 = showInDevice ? this.P1_VALUES.SHOW_ADDRESS_IN_DEVICE : this.P1_VALUES.ONLY_RETRIEVE\n\n    const response = await this.transport.send(this.CLA, this.INS.GET_KEYS, p1, keyType, serializedPath, [LedgerError.NoErrors])\n    const payload = processResponse(response)\n    return processGetKeysResponse(payload, keyType)\n  }\n\n  async sign(path: string, blob: Buffer): Promise<ResponseSign> {\n    try {\n      const chunks = this.prepareChunks(path, blob)\n\n      let result: any\n      for (let i = 0; i < chunks.length; i += 1) {\n        result = await this.sendGenericChunk(this.INS.SIGN, P2_VALUES.DEFAULT, 1, chunks.length, chunks[0])\n      }\n\n      return {\n        signature: result.readBytes(result.length()),\n      }\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async dkgGetIdentity(index: number): Promise<ResponseIdentity> {\n    let req = Buffer.alloc(1)\n    req.writeUint8(index)\n\n    const response = await this.transport.send(this.CLA, this.INS.DKG_IDENTITY, 0, 0, req, [LedgerError.NoErrors])\n    const data = processResponse(response)\n    return processGetIdentityResponse(data)\n  }\n\n  async dkgRound1(index: number, identities: string[], minSigners: number): Promise<ResponseDkgRound1> {\n    try {\n      const blob = serializeDkgRound1(index, identities, minSigners)\n      const chunks = this.prepareChunks(DUMMY_PATH, blob)\n\n      let rawResponse: any\n      for (let i = 0; i < chunks.length; i += 1) {\n        rawResponse = await this.sendGenericChunk(this.INS.DKG_ROUND_1, P2_VALUES.DEFAULT, 1 + i, chunks.length, chunks[i])\n      }\n\n      let result = await this.getResult(rawResponse)\n      return deserializeDkgRound1(result)\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async dkgRound2(index: number, round1PublicPackages: string[], round1SecretPackage: string): Promise<ResponseDkgRound2> {\n    try {\n      const blob = serializeDkgRound2(index, round1PublicPackages, round1SecretPackage)\n      const chunks = this.prepareChunks(DUMMY_PATH, blob)\n\n      let rawResponse: any\n      for (let i = 0; i < chunks.length; i += 1) {\n        rawResponse = await this.sendGenericChunk(this.INS.DKG_ROUND_2, P2_VALUES.DEFAULT, 1 + i, chunks.length, chunks[i])\n      }\n\n      let result = await this.getResult(rawResponse)\n      return deserializeDkgRound2(result)\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async dkgRound3Min(\n    index: number,\n    participants: string[],\n    round1PublicPkgs: string[],\n    round2PublicPkgs: string[],\n    round2SecretPackage: string,\n    gskBytes: string[]\n  ): Promise<void> {\n    try {\n      const blob = serializeDkgRound3Min(index, participants, round1PublicPkgs, round2PublicPkgs, round2SecretPackage, gskBytes)\n      const chunks = this.prepareChunks(DUMMY_PATH, blob)\n\n      for (let i = 0; i < chunks.length; i += 1) {\n        await this.sendGenericChunk(this.INS.DKG_ROUND_3_MIN, P2_VALUES.DEFAULT, 1 + i, chunks.length, chunks[i])\n      }\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async dkgGetCommitments(tx_hash: string): Promise<ResponseDkgGetCommitments> {\n    try {\n      const blob = serializeDkgGetCommitments(tx_hash)\n      const chunks = this.prepareChunks(DUMMY_PATH, blob)\n\n      let rawResponse: any\n      for (let i = 0; i < chunks.length; i += 1) {\n        rawResponse = await this.sendGenericChunk(this.INS.DKG_GET_COMMITMENTS, P2_VALUES.DEFAULT, 1 + i, chunks.length, chunks[i])\n      }\n\n      let result = await this.getResult(rawResponse)\n      return {\n        commitments: result,\n      }\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async dkgSign(pkRandomness: string, frostSigningPackage: string, txHash: string): Promise<ResponseDkgSign> {\n    try {\n      const blob = serializeDkgSign(pkRandomness, frostSigningPackage, txHash)\n      const chunks = this.prepareChunks(DUMMY_PATH, blob)\n\n      let rawResponse: any\n      for (let i = 0; i < chunks.length; i += 1) {\n        rawResponse = await this.sendGenericChunk(this.INS.DKG_SIGN, P2_VALUES.DEFAULT, 1 + i, chunks.length, chunks[i])\n      }\n\n      let result = await this.getResult(rawResponse)\n      return {\n        signature: result,\n      }\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async dkgGetPublicPackage(): Promise<ResponseDkgGetPublicPackage> {\n    try {\n      let response = await this.transport.send(this.CLA, this.INS.DKG_GET_PUBLIC_PACKAGE, 0, 0, Buffer.alloc(0), [LedgerError.NoErrors])\n      let data = processResponse(response)\n\n      let result = await this.getResult(data)\n\n      return {\n        publicPackage: result,\n      }\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async dkgBackupKeys(): Promise<ResponseDkgBackupKeys> {\n    try {\n      let response = await this.transport.send(this.CLA, this.INS.DKG_BACKUP_KEYS, 0, 0, Buffer.alloc(0), [LedgerError.NoErrors])\n      let data = processResponse(response)\n\n      let result = await this.getResult(data)\n\n      return {\n        encryptedKeys: result,\n      }\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n  async dkgRetrieveKeys(keyType: IronfishKeys): Promise<KeyResponse> {\n    const response = await this.transport.send(this.CLA, this.INS.DKG_GET_KEYS, 0, keyType, Buffer.alloc(0), [LedgerError.NoErrors])\n    const data = processResponse(response)\n    return processGetKeysResponse(data, keyType)\n  }\n\n  async dkgRestoreKeys(encryptedKeys: string): Promise<void> {\n    try {\n      const chunks = this.prepareChunks(DUMMY_PATH, Buffer.from(encryptedKeys, 'hex'))\n\n      for (let i = 0; i < chunks.length; i += 1) {\n        await this.sendGenericChunk(this.INS.DKG_RESTORE_KEYS, P2_VALUES.DEFAULT, 1 + i, chunks.length, chunks[i])\n      }\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async reviewTransaction(tx: string): Promise<ResponseReviewTransaction> {\n    try {\n      const blob = Buffer.from(tx, 'hex')\n      const chunks = this.prepareChunks(DUMMY_PATH, blob)\n\n      let rawResponse: any\n      for (let i = 0; i < chunks.length; i += 1) {\n        rawResponse = await this.sendGenericChunk(this.INS.REVIEW_TX, P2_VALUES.DEFAULT, 1 + i, chunks.length, chunks[i])\n      }\n\n      let result = await this.getResult(rawResponse)\n      return deserializeReviewTx(result)\n    } catch (e) {\n      throw processErrorResponse(e)\n    }\n  }\n\n  async getResult(rawResponse: ResponsePayload): Promise<Buffer> {\n    let data = Buffer.alloc(0)\n\n    let chunks = rawResponse.readBytes(1).readUint8()\n    for (let i = 0; i < chunks; i++) {\n      let result = await this.transport.send(this.CLA, this.INS.GET_RESULT, i, 0, Buffer.alloc(0))\n      let response = processResponse(result)\n      data = Buffer.concat([data, response.getCompleteBuffer()])\n    }\n\n    return data\n  }\n}\n"]}